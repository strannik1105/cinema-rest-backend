"""squash migrations

Revision ID: 240a6ba58fdd
Revises: 
Create Date: 2024-06-01 21:14:59.935017

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "240a6ba58fdd"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA food")
    op.execute("CREATE SCHEMA movies")
    op.execute("CREATE SCHEMA rooms")
    op.execute("CREATE SCHEMA staff")
    op.execute("CREATE SCHEMA users")

    op.create_table(
        "food",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("recipe", sa.String(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="food",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_food_food_sid"), "food", ["sid"], unique=True, schema="food"
    )
    op.create_table(
        "movie",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("genre", sa.String(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="movies",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_movies_movie_sid"), "movie", ["sid"], unique=True, schema="movies"
    )
    op.create_table(
        "room",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("cost_per_hour", sa.Float(), nullable=False),
        sa.Column("x", sa.Float(), nullable=False),
        sa.Column("y", sa.Float(), nullable=False),
        sa.Column("width", sa.Float(), nullable=True),
        sa.Column("height", sa.Float(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="rooms",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_rooms_room_sid"), "room", ["sid"], unique=True, schema="rooms"
    )
    op.create_table(
        "cook",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("bookings_count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="staff",
    )
    op.create_index(
        op.f("ix_staff_cook_sid"), "cook", ["sid"], unique=True, schema="staff"
    )
    op.create_table(
        "waiter",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("bookings_count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="staff",
    )
    op.create_index(
        op.f("ix_staff_waiter_sid"), "waiter", ["sid"], unique=True, schema="staff"
    )
    op.create_table(
        "user",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("role", sa.Enum("ADMIN", "USER", name="role"), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        schema="users",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_users_user_sid"), "user", ["sid"], unique=True, schema="users"
    )
    op.create_table(
        "food_image",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("select_as_title", sa.Boolean(), nullable=False),
        sa.Column("food_sid", sa.UUID(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["food_sid"],
            ["food.food.sid"],
        ),
        sa.PrimaryKeyConstraint("sid"),
        schema="food",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_food_food_image_sid"),
        "food_image",
        ["sid"],
        unique=True,
        schema="food",
    )
    op.create_table(
        "movie_image",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("select_as_title", sa.Boolean(), nullable=False),
        sa.Column("movie_sid", sa.UUID(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["movie_sid"],
            ["movies.movie.sid"],
        ),
        sa.PrimaryKeyConstraint("sid"),
        schema="movies",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_movies_movie_image_sid"),
        "movie_image",
        ["sid"],
        unique=True,
        schema="movies",
    )
    op.create_table(
        "booking",
        sa.Column("room_sid", sa.UUID(), nullable=False),
        sa.Column("user_sid", sa.UUID(), nullable=False),
        sa.Column("datetime_start", sa.DateTime(), nullable=False),
        sa.Column("datetime_end", sa.DateTime(), nullable=False),
        sa.Column("waiter_sid", sa.UUID(), nullable=True),
        sa.Column("cook_sid", sa.UUID(), nullable=True),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cook_sid"],
            ["staff.cook.sid"],
        ),
        sa.ForeignKeyConstraint(
            ["room_sid"],
            ["rooms.room.sid"],
        ),
        sa.ForeignKeyConstraint(
            ["user_sid"],
            ["users.user.sid"],
        ),
        sa.ForeignKeyConstraint(
            ["waiter_sid"],
            ["staff.waiter.sid"],
        ),
        sa.PrimaryKeyConstraint("sid"),
        schema="rooms",
        comment="Table with all users",
    )
    op.create_index(
        op.f("ix_rooms_booking_sid"), "booking", ["sid"], unique=True, schema="rooms"
    )
    op.execute(
        "INSERT INTO users.user (sid, name, email, password, role) VALUES ('cc859d7c-3fbf-4d89-ad81-1a31bbeebd42', 'root', 'root@root.com', '$2b$12$.PzoY1uUccOxI/A.CB1wteutIjF853LXRDPkR89Y.WPa0jDc4/1OC', 'ADMIN'::role) ON CONFLICT DO NOTHING"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_rooms_booking_sid"), table_name="booking", schema="rooms")
    op.drop_table("booking", schema="rooms")
    op.drop_index(
        op.f("ix_movies_movie_image_sid"), table_name="movie_image", schema="movies"
    )
    op.drop_table("movie_image", schema="movies")
    op.drop_index(
        op.f("ix_food_food_image_sid"), table_name="food_image", schema="food"
    )
    op.drop_table("food_image", schema="food")
    op.drop_index(op.f("ix_users_user_sid"), table_name="user", schema="users")
    op.drop_table("user", schema="users")
    op.drop_index(op.f("ix_staff_waiter_sid"), table_name="waiter", schema="staff")
    op.drop_table("waiter", schema="staff")
    op.drop_index(op.f("ix_staff_cook_sid"), table_name="cook", schema="staff")
    op.drop_table("cook", schema="staff")
    op.drop_index(op.f("ix_rooms_room_sid"), table_name="room", schema="rooms")
    op.drop_table("room", schema="rooms")
    op.drop_index(op.f("ix_movies_movie_sid"), table_name="movie", schema="movies")
    op.drop_table("movie", schema="movies")
    op.drop_index(op.f("ix_food_food_sid"), table_name="food", schema="food")
    op.drop_table("food", schema="food")

    op.execute("DROP SCHEMA food")
    op.execute("DROP SCHEMA movies")
    op.execute("DROP SCHEMA rooms")
    op.execute("DROP SCHEMA staff")
    op.execute("DROP SCHEMA users")
    # ### end Alembic commands ###
